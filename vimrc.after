set t_Co=256
"color xoria256
color solarized
set background=dark

" Chagned the folding background color to black
hi Folded term=standout ctermfg=255 ctermbg=darkgray guifg=#eeeeee guibg=#323247

" Macros
let @f="mu?it.*do$? i,focus:true'u"
let @u="mu?it.*,focus:true/,focusdt 'u"

" Escape special characters in a string for exact matching.
" This is useful to copying strings from the file to the search tool
" Based on this - http://peterodding.com/code/vim/profile/autoload/xolox/escape.vim
function! EscapeString (string)
  let string=a:string
  " Escape regex characters
  let string = escape(string, '^$.*\/~[]')
  " Escape the line endings
  let string = substitute(string, '\n', '\\n', 'g')
  return string
endfunction

" Get the current visual block for search and replaces
" This function passed the visual block through a string escape function
" Based on this - http://stackoverflow.com/questions/676600/vim-replace-selected-text/677918#677918
function! GetVisual() range
  " Save the current register and clipboard
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&

  " Put the current visual selection in the " register
  normal! ""gvy
  let selection = getreg('"')

  " Put the saved registers and clipboards back
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save

  "Escape any special characters in the selection
  let escaped_selection = EscapeString(selection)

  return escaped_selection
endfunction

" Add toggling of relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

" Enable scrolling with the mouse
" set mouse=nicr

" Set Github username/token for Gist.vim
let g:github_user = $GITHUB_USER
let g:github_token = $GITHUB_TOKEN

" Set Gist to detect filetype from file
let g:gist_detect_filetype = 1

" Set Gist to set clipboard of remote Mac
let uname = substitute(system("uname"),"\n","","g")
if uname == "Linux"
  let g:gist_open_browser_after_post = 1
  let g:gist_browser_command = 'ssh -p 2222 localhost open %URL%'
  let g:gist_clip_command = 'tmux set-buffer' " Doesn't seem to work
endif

" Remap jj to Esc in insert mode
inoremap jj <Esc>

" Start the find and replace command across the entire file
vnoremap <C-r> <Esc>:%s/<c-r>=GetVisual()<cr>//gc<left><left><left>

" Create a new line below the current one (and stay in normal mode)
nnoremap <C-j> o<Esc>k

" Create a new line above the current one (and stay in normal mode)
nnoremap <C-k> O<Esc>j

" Clear search highlight when you hit esc
noremap <silent> <c-l> :nohls<cr><c-l>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Tabularize {
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
endif
" }
